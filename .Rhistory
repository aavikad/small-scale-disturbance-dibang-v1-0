library(dplyr)
library(tidyverse)
library(devtools)
library(ggplot2)
library(ggpubr)
library(git2r)
library(usethis)
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_data_disturbance_2021_2023.csv", header=TRUE)
getwd()
library(dplyr)
library(tidyverse)
library(devtools)
library(git2r)
library(usethis)
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_data_disturbance_2021_2023.csv", header=TRUE)
getwd()
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_data_disturbance_2021_2023.csv", header=TRUE)
bird_dist<- na.omit(bird_dist)
bird_dist<- bird_dist %>% distinct()
head(bird_dist)
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_data_disturbance_2021_2023.csv", header=TRUE)
bird_dist<- na.omit(bird_dist)
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_data_disturbance_2021_2023.csv", header=TRUE)
bird_dist<- bird_dist %>% distinct()
head(bird_dist)
## how many species are there in total ###
bird_dist_names = subset(bird_dist, select=c(disturbance, scientific_name))
unique(bird_dist_names$scientific_name) #74 species in total
bird_dist<- na.omit(bird_dist)
bird_dist<- bird_dist %>% distinct()
## how many species are there in total ###
bird_dist_names = subset(bird_dist, select=c(disturbance, scientific_name))
unique(bird_dist_names$scientific_name) #74 species in total
pre_dist<- bird_dist %>% filter(disturbance== "pre-disturbance")
pre_dist_bird = subset(pre_dist, select=c(plot, scientific_name))
post_dist<- bird_dist %>% filter(disturbance== "post-disturbance")
post_dist_bird = subset(post_dist, select=c(plot, scientific_name))
aggregate(data=bird_dist_names,
scientific_name ~ disturbance, function(x) length(unique(x))) # pre-disturbance 57, post-disturbance 61
intersect(pre_dist$scientific_name, post_dist$scientific_name) # 45 common
setdiff(pre_dist$scientific_name, post_dist$scientific_name) #11 unique
setdiff(post_dist$scientific_name, pre_dist$scientific_name) #17 unique
### alpha diversity #######
###### species by sites matrix- incidence_raw data with 0s and 1s
library(iNEXT)
pre_dist_bird_matrix<- pre_dist_bird %>%
group_by(plot, scientific_name) %>%
summarise(n=n())
pre_dist_bird_matrix_wide<- pre_dist_bird_matrix %>%
pivot_wider(names_from = plot, values_from = n, values_fill=0) %>%
column_to_rownames("scientific_name")
post_dist_bird_matrix<- post_dist_bird %>%
group_by(plot, scientific_name) %>%
summarise(n=n())
post_dist_bird_matrix_wide<- post_dist_bird_matrix %>%
pivot_wider(names_from = plot, values_from = n, values_fill=0) %>%
column_to_rownames("scientific_name")
dist_list<- list(pre_disturbance=pre_dist_bird_matrix_wide, post_disturbance=post_dist_bird_matrix_wide)
richness.dist.raw<- iNEXT(dist_list, q=0, datatype = "incidence_raw", size=NULL, endpoint=NULL, se= TRUE, knots=40, conf=0.95, nboot=50)
richness.dist.raw$iNextEst$coverage_based
plot(richness.dist.raw, type=1, cex.axis = 1.5) # sample size-based R/E curve
plot(richness.dist.raw, type=2, cex.axis = 1.5) # completeness curve
plot(richness.dist.raw, type=3, cex.axis = 1.5) # coverage-based rarefaction/extrapolation curve
View(pre_dist_bird_matrix)
plot(richness.dist.raw, type=2, cex.axis = 1.5) # completeness curve
plot(richness.dist.raw, type=3, cex.axis = 1.5) # coverage-based rarefaction/extrapolation curve
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("disturbance_2021_2023_v3.csv", header=TRUE)
bird_dist<- na.omit(bird_dist)
bird_dist<- bird_dist %>% distinct()
head(bird_dist)
## how many species are there in total ###
bird_dist_names = subset(bird_dist, select=c(disturbance, scientific_name))
unique(bird_dist_names$scientific_name) #73 species in total
pre_dist<- bird_dist %>% filter(disturbance== "pre-disturbance")
pre_dist_bird = subset(pre_dist, select=c(plot, scientific_name))
post_dist<- bird_dist %>% filter(disturbance== "post-disturbance")
post_dist_bird = subset(post_dist, select=c(plot, scientific_name))
aggregate(data=bird_dist_names,
scientific_name ~ disturbance, function(x) length(unique(x))) # pre-disturbance 57, post-disturbance 61
intersect(pre_dist$scientific_name, post_dist$scientific_name) # 45 common
setdiff(pre_dist$scientific_name, post_dist$scientific_name) #11 unique
setdiff(post_dist$scientific_name, pre_dist$scientific_name) #16 unique
### alpha diversity #######
###### species by sites matrix- incidence_raw data with 0s and 1s
library(iNEXT)
pre_dist_bird_matrix<- pre_dist_bird %>%
group_by(plot, scientific_name) %>%
summarise(n=n())
pre_dist_bird_matrix_wide<- pre_dist_bird_matrix %>%
pivot_wider(names_from = plot, values_from = n, values_fill=0) %>%
column_to_rownames("scientific_name")
post_dist_bird_matrix<- post_dist_bird %>%
group_by(plot, scientific_name) %>%
summarise(n=n())
post_dist_bird_matrix_wide<- post_dist_bird_matrix %>%
pivot_wider(names_from = plot, values_from = n, values_fill=0) %>%
column_to_rownames("scientific_name")
dist_list<- list(pre_disturbance=pre_dist_bird_matrix_wide, post_disturbance=post_dist_bird_matrix_wide)
richness.dist.raw<- iNEXT(dist_list, q=0, datatype = "incidence_raw", size=NULL, endpoint=NULL, se= TRUE, knots=40, conf=0.95, nboot=50)
richness.dist.raw$iNextEst$coverage_based
plot(richness.dist.raw, type=1, cex.axis = 1.5) # sample size-based R/E curve
plot(richness.dist.raw, type=2, cex.axis = 1.5) # completeness curve
plot(richness.dist.raw, type=3, cex.axis = 1.5) # coverage-based rarefaction/extrapolation curve
## some more inext plots (optional)
ggiNEXT(richness.dist.raw, type=1)+
theme_bw() +
theme(legend.position = "right",
text = element_text(size = 16),
axis.text = element_text(size = 16)) # sample size-based R/E curve
ggiNEXT(richness.dist.raw, type=2)+
theme_bw() +
theme(legend.position = "right",
text = element_text(size = 16),
axis.text = element_text(size = 16)) # completeness curve
ggiNEXT(richness.dist.raw, type=3)+ theme_bw() +
theme(legend.position = "right",
text = element_text(size = 16),
axis.text = element_text(size = 16)) # coverage-based rarefaction/extrapolation curve
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_disturbance_dibang_2021_2023.csv", header=TRUE)
### exploration######
#### pre disturbance richness ###
bird_dist<- read.csv("sp_disturbance_dibang_2021_2023.csv", header=TRUE)
bird_dist<- na.omit(bird_dist)
bird_dist<- bird_dist %>% distinct()
head(bird_dist)
## how many species are there in total ###
bird_dist_names = subset(bird_dist, select=c(disturbance, scientific_name))
unique(bird_dist_names$scientific_name) #73 species in total
pre_dist<- bird_dist %>% filter(disturbance== "pre-disturbance")
pre_dist_bird = subset(pre_dist, select=c(plot, scientific_name))
post_dist<- bird_dist %>% filter(disturbance== "post-disturbance")
post_dist_bird = subset(post_dist, select=c(plot, scientific_name))
aggregate(data=bird_dist_names,
scientific_name ~ disturbance, function(x) length(unique(x))) # pre-disturbance 57, post-disturbance 61
intersect(pre_dist$scientific_name, post_dist$scientific_name) # 45 common
setdiff(pre_dist$scientific_name, post_dist$scientific_name) #11 unique
setdiff(post_dist$scientific_name, pre_dist$scientific_name) #16 unique
### alpha diversity #######
###### species by sites matrix- incidence_raw data with 0s and 1s
library(iNEXT)
pre_dist_bird_matrix<- pre_dist_bird %>%
group_by(plot, scientific_name) %>%
summarise(n=n())
pre_dist_bird_matrix_wide<- pre_dist_bird_matrix %>%
pivot_wider(names_from = plot, values_from = n, values_fill=0) %>%
column_to_rownames("scientific_name")
post_dist_bird_matrix<- post_dist_bird %>%
group_by(plot, scientific_name) %>%
summarise(n=n())
post_dist_bird_matrix_wide<- post_dist_bird_matrix %>%
pivot_wider(names_from = plot, values_from = n, values_fill=0) %>%
column_to_rownames("scientific_name")
dist_list<- list(pre_disturbance=pre_dist_bird_matrix_wide, post_disturbance=post_dist_bird_matrix_wide)
richness.dist.raw<- iNEXT(dist_list, q=0, datatype = "incidence_raw", size=NULL, endpoint=NULL, se= TRUE, knots=40, conf=0.95, nboot=50)
richness.dist.raw$iNextEst$coverage_based
plot(richness.dist.raw, type=1, cex.axis = 1.5) # sample size-based R/E curve
plot(richness.dist.raw, type=2, cex.axis = 1.5) # completeness curve
plot(richness.dist.raw, type=3, cex.axis = 1.5) # coverage-based rarefaction/extrapolation curve
## some more inext plots (optional)
ggiNEXT(richness.dist.raw, type=1)+
theme_bw() +
theme(legend.position = "right",
text = element_text(size = 16),
axis.text = element_text(size = 16)) # sample size-based R/E curve
ggiNEXT(richness.dist.raw, type=2)+
theme_bw() +
theme(legend.position = "right",
text = element_text(size = 16),
axis.text = element_text(size = 16)) # completeness curve
#lapply(richness.dist.raw, function(x) write.table( data.frame(x), 'richness_rarefied.csv'  , append= T, sep=',' )) # to export
rarefied_richness_coverage<- read.csv("rarefied_richness_coverage.csv") # cleaned
pre_dist_richness<- rarefied_richness_coverage %>%
filter(Assemblage== "pre_dist")
post_dist_richness<- rarefied_richness_coverage %>%
filter(Assemblage=="post_dist")
#### visualsing ###
### box plots ###
traits<- read.csv("traits.csv")
traits<- na.omit(traits)
traits$disturbance<- factor(traits$disturbance, levels=c("pre-disturbance", "post-disturbance"))
traits$logmass<- log(traits$mass)
ggplot(traits, aes(x=disturbance, y=logmass, color=disturbance), col="white")+
geom_boxplot()+
geom_jitter()+ theme_bw() + xlab("disturbance periods") # exploration
### density plot ###
suppressWarnings({ggplot(traits, aes(x=logmass, fill= disturbance, color=disturbance))+
geom_density(alpha=0.3)+
theme_ipsum()+
labs(x="log(mass)", y= "density")+
theme(
axis.title.x = element_text(vjust = 0),  # Adjust vjust to center horizontally
axis.title.y = element_text(vjust = 0.5, angle = 90)  # Adjust vjust to center vertically
)
})
### density plot ###
suppressWarnings({ggplot(traits, aes(x=logmass, fill= disturbance, color=disturbance))+
geom_density(alpha=0.3)+
theme_ipsum()+
labs(x="log(mass)", y= "density")+
theme(
axis.title.x = element_text(vjust = 0),  # Adjust vjust to center horizontally
axis.title.y = element_text(vjust = 0.5, angle = 90)  # Adjust vjust to center vertically
)
})
### density plot ###
suppressWarnings({ggplot(traits, aes(x=logmass, fill= disturbance, color=disturbance))+
geom_density(alpha=0.3)+
theme_ipsum()+
labs(x="log(mass)", y= "density")+
theme(
axis.title.x = element_text(vjust = 0),  # Adjust vjust to center horizontally
axis.title.y = element_text(vjust = 0.5, angle = 90)  # Adjust vjust to center vertically
)
})
library(xfun)
### density plot ###
suppressWarnings({ggplot(traits, aes(x=logmass, fill= disturbance, color=disturbance))+
geom_density(alpha=0.3)+
theme_ipsum()+
labs(x="log(mass)", y= "density")+
theme(
axis.title.x = element_text(vjust = 0),  # Adjust vjust to center horizontally
axis.title.y = element_text(vjust = 0.5, angle = 90)  # Adjust vjust to center vertically
)
})
#library(xfun)
library(hrbrthemes)
### density plot ###
suppressWarnings({ggplot(traits, aes(x=logmass, fill= disturbance, color=disturbance))+
geom_density(alpha=0.3)+
theme_ipsum()+
labs(x="log(mass)", y= "density")+
theme(
axis.title.x = element_text(vjust = 0),  # Adjust vjust to center horizontally
axis.title.y = element_text(vjust = 0.5, angle = 90)  # Adjust vjust to center vertically
)
})
traits_pre<- traits %>%
filter(disturbance== "pre-disturbance")
traits_post<- traits %>%
filter(disturbance== "post-disturbance")
ggqqplot(traits_pre$logmass)
shapiro.test(traits_pre$logmass) # W = 0.92131, p-value = 6.112e-05 not normal
ggqqplot(traits_post$logmass)
shapiro.test(traits_post$logmass) # W = 0.91813, p-value = 1.352e-05 not normal
wilcox.test(traits_pre$logmass, traits_post$logmass) #W = 4551.5, p-value = 0.3497 not significant
fligner.test(list(traits_pre$logmass, traits_post$logmass)) #Fligner-Killeen:med chi-squared = 1.7697, df = 1, p-value = 0.1834 # not significant
all_trophic<- union(traits_pre$trophic_niche_stratification, traits_post$trophic_niche_stratification)
table_pre <- table(factor(traits_pre$trophic_niche_stratification, levels = all_trophic))
table_post <- table(factor(traits_post$trophic_niche_stratification, levels = all_trophic))
combined_trophic <- cbind(table_pre, table_post)
fisher_trophic<- fisher.test(combined_trophic, simulate.p.value = TRUE, B = 10000)
print(fisher_trophic) # not significant p-value =  0.3057 not significant
# Calculate the test statistic manually
n <- sum(combined_trophic)  # Total number of observations
a <- combined_trophic[1, 1]  # Frequency in cell 1,1
b <- combined_trophic[1, 2]  # Frequency in cell 1,2
c <- combined_trophic[2, 1]  # Frequency in cell 2,1
d <- combined_trophic[2, 2]  # Frequency in cell 2,2
# Calculate Fisher's exact test statistic
test_statistic <- (a * d - b * c) / sqrt((a + b) * (a + c) * (b + d) * (c + d))
# Calculate Fisher's exact test statistic
test_statistic <- (a * d - b * c) / sqrt((a + b) * (a + c) * (b + d) * (c + d))
trophic_table<- table(traits$trophic_niche_stratification,traits$disturbance)
fisher.test(trophic_table) # p-value = 0.8776
library(RColorBrewer)
pastel_palette <- c("#FAC08F", "#FFDE8A", "#FFF1AA", "#C0F8D1", "#A4E3D4",
"#B9D1F1", "#B3B7F5", "#E3B4D1", "#F9C4B2", "#FFD2AA")
par(cex.axis = 1.0)
barplot(prop.table(trophic_table, 2),
legend.text = FALSE,
args.legend = list(cex=0.80,x="topright"),
col = pastel_palette,
ylab = "Proportion of Trophic groups",
xlab = "Sampling stages",
cex.axis=1.2,
cex.lab = 1.2)
barplot(prop.table(trophic_table, 2),
legend.text = TRUE,
args.legend = list(cex=0.80,x="topright"),
col = pastel_palette,
ylab = "Proportion of Trophic groups",
xlab = "Sampling stages",
cex.axis=1.2,
cex.lab = 1.2)
library(indicspecies)
pre_dist_bird_matrix2<- pre_dist_bird %>%
group_by(scientific_name, plot) %>%
summarise(n=n())
pre_dist_bird_wide2<- pre_dist_bird_matrix2 %>%
pivot_wider(names_from = scientific_name, values_from = n, values_fill=0) %>%
column_to_rownames("plot")
pre_mat<- as.data.frame(ifelse(pre_dist_bird_wide2 >0,1,0))
# Move row names to the last column
pre_mat2 <- cbind(pre_mat[, -1, drop = FALSE], ID = rownames(pre_mat))
colnames(pre_mat2)[ncol(pre_mat2)]<- "Group"
rownames(pre_mat2)<- NULL
# Perform IndVal analysis
indval_result_pre <- multipatt(pre_mat2[, -ncol(pre_mat2)], pre_mat2$Group, func= "r",
control = how(nperm = 999))
